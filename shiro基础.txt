一、
1、Apache Shiro是一个强大且易用的Java安全框架,为我们提功了如下功能：
（重重重点）
身份验证（Authentication）
授权（Authorization）
密码（cryptography）
会话管理（session management）

（了解）
与Web集成（Web Support）
缓存（Caching）：用户登录后，保存用户登录信息、拥有的角色和权限
多线程（Concurrency）
测试（Testing）
Run As：允许一个用户假装为另一个用户（如果他们允许）进行访问
Remember Me：记住我

Shiro不会去维护用户，维护权限；这些需要我们自己去设计/提供；然后通过响应的接口注入给Shiro集合

2、三个核心组件：Subject, SecurityManager 和 Realms.

**官方文档：
    Subject：
    即“当前操作用户”。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。
    Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。

    SecurityManager：
    它是Shiro框架的核心，典型的(门面)Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。

    Realm：
    Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，
    Shiro会从应用配置的Realm中查找用户及其权限信息。
    从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。
    当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。
    Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。
    如果缺省的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。

**博客：
    Subject：翻译为主角，当前参与应用安全部分的主角。可以是用户，可以试第三方服务，可以是cron 任务，或者任何东西。主要指一个正在与当前软件交互的东西。
    所有Subject都需要SecurityManager，当你与Subject进行交互，这些交互行为实际上被转换为与SecurityManager的交互

    SecurityManager：安全管理员，Shiro架构的核心，它就像Shiro内部所有原件的保护伞。然而一旦配置了SecurityManager，SecurityManager就用到的比较少，开发者大部分时间都花在Subject上面。
    请记得，当你与Subject进行交互的时候，实际上是SecurityManager在背后帮你举起Subject来做一些安全操作。

    Realms：安全数据源。Realms作为Shiro和你的应用的连接桥，当需要与安全数据交互的时候，像用户账户，或者访问控制，Shiro就从一个或多个Realms中查找。
    Shiro提供了一些可以直接使用的Realms，如果默认的Realms不能满足你的需求，你也可以定制自己的Realms

3、RBAC模型

**Role Base Access Controll:基于角色的访问控制
**模型中的三个主体：用户、角色、权限
用户--权限，多对多
用户--角色，多对多

经典的五张表结构
用户表、角色表、用户-角色表、权限、角色-权限表

4、配置文件ini

在Mysql中有一个my.ini的配置文件，ini文件没有标签，但分区域。
idea插件Ini，idea对.ini文件的支持,非必须

5、Token
AuthenticationToken：其他Token的父类
UsernamePasswordToken：用户名密码Token

6、异常
shiro中所有异常的父类：ShiroException，继承了RuntimeException


** IncorrectCredentialsException：密码不正确
    org.apache.shiro.authc.IncorrectCredentialsException: Submitted credentials for token [org.apache.shiro.authc.UsernamePasswordToken - zhang, rememberMe=false] did not match the expected credentials.
** UnknownAccountException：用户名不存在
    org.apache.shiro.authc.UnknownAccountException: Realm [org.apache.shiro.realm.text.IniRealm@3e6fa38a] was unable to find account data for the submitted AuthenticationToken [org.apache.shiro.authc.UsernamePasswordToken - zhang12, rememberMe=false].
** LockedAccountException：账号冻结，该异常不会主动抛出，如果需要直接使用。


7、Realm
** IniRealm：缺省时的默认Realm

** 在配置文件中配置realm
    声明
    myRealm1=com.vainglory.realm.MyRealm1
    myRealm2=com.vainglory.realm.MyRealm2
    指定securityManager的realms实现
    securityManager.realms=$myRealm1,$myRealm2
    配置了两个realm，用于验证两个不同的用户的Token，所以一个用户的Token被两个realm进行验证，
    一个验证通过，一个验证失败,最终通过。参考AuthenticationStrategy
** shiro中有多个用于不同场景的Realm实现
    一般自定义的Realm继承 AuthorizingRealm（授权）即可；其继承了 AuthenticatingRealm（即身份验证），而且也间接继承了 CachingRealm（带有缓存实现）。
    其中主要默认实现如下：
    1、org.apache.shiro.realm.text.IniRealm：ini文件配置方式，[users] 部分指定用户名 / 密码及其角色；[roles] 部分指定角色即权限信息，默认；
    2、org.apache.shiro.realm.text.PropertiesRealm： properties配置方式，user.username=password,role1,role2 指定用户名 / 密码及其角色；role.role1=permission1,permission2 指定角色及权限信息；
    3、org.apache.shiro.realm.jdbc.JdbcRealm：通过 sql 查询相应的信息（简单的访问数据库的实现，不常用，不够灵活），JdbcRealm中默认的SQL语句，如
        “select password from users where username = ?” 获取用户密码；
        “select password, password_salt from users where username = ?”获取用户密码及盐；
        “select role_name from user_roles where username = ?” 获取用户角色；
        “select permission from roles_permissions where role_name = ?” 获取角色对应的权限信息；
    JdbcRealm为我们提供了一些默认的sql语句用于操作数据库，此时，数据库中的表名，需要按照默认的方式命名，如users、password_salt、user_roles、roles_permissions
    当然我们可以调用相应的api自定义SQL语句


8、权限的规则
**最常用的权限标识：【资源 ：操作】
    1）user:query , user:insert , order:delete , menu:show
        【:】 作为分隔符，分隔资源和操作【资源:操作】
        【,】 作为分隔，分隔多个权限【权限1,权限2,权限3】
    2）user:* , *:query
        【*】 作为通配符，代表所有操作、资源
        【user:* 即user的所有操作】
        【*:query 即所有资源的查询操作】
    3）*
        【代表一切资源的一切权限 = 最高权限】
    4）细节：
        1)【user:*  可以匹配 user:xx, user:xx:xxx】
          【*:query 只可以匹配 xx:query,不能匹配 xx:xx:query. 除非 *:*:query】
        2)【user:update,user:insert】 可以简写为 【"user:update,insert"】
           [roles]
           manager1=user:query,user:update,user:insert
           manager2="user:query,update,insert" #注意要加引号
           #如上manager1和manager2权限等价
           #subject.isPermittedAll("user:update","user:insert","user:query")
**实例级权限标识：【资源 ：操作 ：实例】，粒度细化到具体某个资源实例
1）user:update:1 , user:delete:1
   # 对用户1可以update,对用户1可以delete
2）"user:update,delete:1" #和上面等价
   # subject.isPermittedAll("user:update,delete:1","user:update:1","user:delete:1")
3）user:*:1 , user:update:* , user:*:*


9、与Web集成 ShiroFilter过滤器，早于SpringMVC
shiro-core、shiro-web

** 过滤器

**排除指定Handler不经过拦截器ShiroFilter
[main]
[urls]
/user/all = 过滤器 anon，anon是一个缺省的默认的拦截器
/user/all = 过滤器 authc，authc强制登录
/user/logout = logout logout也是内部一个过滤器，负责登出，Handler也可以不用写



Authenticator 及 AuthenticationStrategy
Authenticator 的职责是验证用户帐号，是 Shiro API 中身份验证核心的入口点：
如果验证成功，将返回 AuthenticationInfo 验证信息；此信息中包含了身份及凭证；如果验证失败将抛出相应的 AuthenticationException 实现。
SecurityManager 接口继承了 Authenticator，另外还有一个 ModularRealmAuthenticator 实现，其委托给多个 Realm 进行验证，验证规则通过 AuthenticationStrategy 接口指定，默认提供的实现：
FirstSuccessfulStrategy：只要有一个 Realm 验证成功即可，只返回第一个 Realm 身份验证成功的认证信息，其他的忽略；
AtLeastOneSuccessfulStrategy：只要有一个 Realm 验证成功即可，和 FirstSuccessfulStrategy 不同，返回所有 Realm 身份验证成功的认证信息；
AllSuccessfulStrategy：所有 Realm 验证成功才算成功，且返回所有 Realm 身份验证成功的认证信息，如果有一个失败就失败了。
ModularRealmAuthenticator 默认使用 AtLeastOneSuccessfulStrategy 策略。

JDBC测试
